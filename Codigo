import pandas as pd
import locale
import calendar
import dash
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import plotly.express as px
from dash import html, dcc, Input, Output
from dash.dependencies import Input, Output
from dash_bootstrap_templates import ThemeSwitchAIO

locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')

df = pd.read_csv('./data/df_completo.csv')
df['dt_Venda'] = pd.to_datetime(df['dt_Venda'])
df['Total Vendas'] = df['Preço Unitário'] * df['Quantidade']


df['Mes'] = df['dt_Venda'].dt.strftime('%b').str.upper()

# Lista de meses
lista_meses = []
for mes in df['Mes'].unique():
    lista_meses.append({
        'label': mes,
        'value': mes
    })
lista_meses.append(
    {'label': 'Todos os meses', 'value': 'Ano'}
)


# Lista de categorias
lista_categorias = []
for categoria in df['Categorias'].unique():
    lista_categorias.append({
        'label': categoria,
        'value': categoria
    })

lista_categorias.append({
    'label': 'Todas as Categorias',
    'value': 'Categorias'
})


# Lista de clientes
lista_clientes = []
for cliente in df['Cliente'].unique():
    lista_clientes.append(
        {
            'label': cliente,
            'value': cliente
        }
    )
lista_clientes.append(
    {'label': 'Todos os Clientes', 'value': 'Cliente'}
)


# Temas
dark_theme = 'darkly'
vapor_theme = 'vapor'
url_dark_theme = dbc.themes.DARKLY
url_vapor_them = dbc.themes.VAPOR


# ----------------------------------------------------------

app = dash.Dash(__name__)

layout_cabeçalho = html.Div([
    html.Div(
        dcc.Dropdown(
            id='cliente_dropdown',
            options= lista_clientes,
            placeholder='Escolha um cliente',
            style={
                'font-family': 'Fira Code',
                'border': 'none',
                'background-color': 'transparent'
            }
        ),style={'width':'25%'}
    ),
    
    html.Div(
        html.Legend(
            'Ebony Store ©',
            style={
                'font-size': '150%',
                'text-aligm': 'center'
            }
        ), style={'width': '50%'}
    ),
    
    html.Div(
        ThemeSwitchAIO(
            aio_id = 'theme',
            themes=[
                url_vapor_them,
                url_dark_theme
            ]
        ),style={'width': '25%'}
    )
    ], style= {
        'text-align':'center',
        'display': 'flex',
        'justify-content': 'space-around',
        'margin-top': '20px'
    }
)


layout_linha01 = html.Div([
    
    html.Div([
        html.H4(id='output_cliente'),
        dcc.Graph(id='visual01')
    ], style={
        'text-align': 'center',
        'width':'65%'
    }),
    
    html.Div([
        dbc.RadioItems(
            id='radio_meses',
            options=lista_meses,
            inline=True
        ),
        dbc.RadioItems(
            id='radio_categorias',
            options=lista_categorias,
            inline=True
        )
    ], style={
        'width':'30%',
        'display': 'flex',
        'flex-direction': 'column',
        'justify-content': 'space-evenly'
    })
    
    ], style={
    'display': 'flex',
    'justify-content': 'space-around',
    'margin-top': '15px',
    'height': '300px'
})


layout_linha02 = html.Div([
    
    html.Div([
        html.H5(
            'Vendas por Mês e Loja'
        ),
        dcc.Graph(
            id='visual02'
        )
    ], style={
        'width': '60%',
        'text-align': 'center'
    }),


    html.Div(
        dcc.Graph(
            id= 'visual03'
        ), style={
            'width': '35%'
        }    
    )
    
], style={
    'display': 'flex', 
    'justify-content': 'space-around',
    'margin-top':'40px',
    'height':'100px'
})
    
    




app.layout = html.Div([
    layout_cabeçalho,
    layout_linha01,
    layout_linha02
])


# ------------------- FUNÇÕES DE APOIO ---------------------
def filtro_cliente(cliente_selecionado):
    if cliente_selecionado is None:
        return pd.Series(True, index=df.index)
    else:
        return df['Cliente'] == cliente_selecionado

def filtro_mes(mes_selecionado):
    if mes_selecionado is None: 
        return pd.Series(True, index=df.index)
    elif mes_selecionado == 'Ano':
        return pd.Series(True, index=df.index)
    return df['Mes'] == mes_selecionado

def filtro_categoria(categoria_selecionada):
    if categoria_selecionada is None:
        return pd.Series(True, index=df.index)
    elif categoria_selecionada == 'Categorias':
        return pd.Series(True, index=df.index)
    #else:
        return df['Categorias'] == categoria_selecionada




# ----------------------- CALLBACKS ------------------------
@app.callback(
    Output('output_cliente', 'children'),
    Input('cliente_dropdown', 'value')
)
def output_update(cliente_selecionado):
    if cliente_selecionado:
        return f'Top5 Produtos comprados por: {cliente_selecionado}'
    return 'Top5 Produtos Vendidos'
     
     
@app.callback(
    Output('visual01', 'figure'),
    [
        Input('cliente_dropdown', 'value'),
        Input('radio_meses', 'value'),
        Input('radio_categorias', 'value'),
        Input(ThemeSwitchAIO.ids.switch('theme'), 'value')
    ]
)
def visual01(cliente, mes, categoria, toggle):
    
    template = vapor_theme if toggle else dark_theme

    nome_cliente = filtro_cliente(cliente)
    nome_mes = filtro_mes(mes)
    nome_categoria = filtro_categoria(categoria)
    
    cliente_mes_categoria = nome_cliente & nome_mes & nome_categoria
    
    df1 = df.loc[cliente_mes_categoria]  
        
    # Manipulação de dados
    df_grupo = df1.groupby(['Produto', 'Categorias'])['Total Vendas'].sum().reset_index()

    df_top5 = df_grupo.sort_values(
        by='Total Vendas', 
        ascending=False
    ).head(5)
    
    
    # Criando o gráfico
    fig1 = px.bar(
        df_top5,
        x= 'Produto',
        y= 'Total Vendas',
        color='Total Vendas',
        text='Total Vendas',
        color_continuous_scale='blues',
        height= 280,
        template= template
    )
    
    fig1.update_traces(
        texttemplate='%{text:.2s}',
        textposition='outside'
    )
    
    fig1.update_layout(
        xaxis= dict(showgrid=False),
        yaxis= dict(
            showgrid=False,
            range=[
                df_top5['Total Vendas'].min() * 0,
                df_top5['Total Vendas'].max() * 1.2
            ]
        ),
        xaxis_title=None,
        yaxis_title=None,
        xaxis_tickangle=-15,
        margin=dict(t=0),
        font=dict(size=13),
        plot_bgcolor = 'rgba(0,0,0,0)',
        paper_bgcolor = 'rgba(0,0,0,0)'
    )
    
    return fig1


@app.callback(
    [
    Output('visual02', 'figure'),
    Output('visual03', 'figure')
    ],
    [
        Input('radio_meses', 'value'),
        Input('radio_categorias', 'value'),
        Input(ThemeSwitchAIO.ids.switch('theme'), 'value')
    ]
)
def visual02(mes, categoria, toggle):
    template = vapor_theme if toggle else dark_theme
    
    nome_mes = filtro_mes(mes)
    nome_categoria = filtro_categoria(categoria)
    
    mes_categoria = nome_mes & nome_categoria
    
    df_1 = df.loc[nome_categoria]
    df_2 = df.loc[mes_categoria]
    
    df_vendas_loja1 = df_1.groupby(['Mes', 'Loja'])['Total Vendas'].sum().reset_index()

    df_vendas_loja2 = df_2.groupby(['Mes', 'Loja'])['Total Vendas'].sum().reset_index()


    
    max_size = df_vendas_loja1['Total Vendas'].max()
    min_size = df_vendas_loja1['Total Vendas'].min()
    
    cores_lojas = {
        'Rio de Janeiro': '#4cf55a',
        'São Paulo': '#f54cbf',
        'Salvador': '#63dbd1',
        'Santos': '#f54c62',
        'Três Rios': '#fff'
    }
    
    meses = [
        'JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN',
        'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'
    ]
    
    
    fig2 = go.Figure()
    
    for loja in df_vendas_loja1['Loja'].unique():
        df_loja = df_vendas_loja1[df_vendas_loja1['Loja'] == loja]
        cor = cores_lojas.get(loja, 'Black')
         
        fig2.add_trace(
            go.Scatter(
                x=df_loja['Mes'],
                y=df_loja['Total Vendas'],
                mode='markers',
                marker=dict(
                    size=(df_loja['Total Vendas'] - min_size) /
                    (max_size - min_size) * 50
                ),
                opacity=0.5,
                line=dict(color=cor, width=0),
                name=str(loja)
            )
        )
        
    fig2.update_layout(
        margin=dict(t=0),
        template = template,
        plot_bgcolor = 'rgba(0,0,0,0)',
        paper_bgcolor = 'rgba(0,0,0,0)',
        xaxis=dict(
            categoryorder='array',
            categoryarray=meses,
            showgrid=False
        ),
        yaxis=dict(showgrid=False)
    )
    
    fig3 = go.Figure(
        data=go.Scatterpolar(
            r = df_vendas_loja2['Total Vendas'], 
            theta= df_vendas_loja2['Loja'],
            line=dict(color='rgb(31, 119, 180)'),
            marker=dict(color='rgb(31, 119, 180)', size=10),
            opacity=0.5
        )
    )
    fig3.update_layout(
        template= template,
        polar=dict(
            radialaxis=dict(
                visible=True,
                tickfont=dict(size=12),
                tickangle=0,
                ticklen=5,
                range=[0, max(df_vendas_loja2['Total Vendas']) + 1000]
            )
        ),
        font=dict(family='Fira Code', size=12),
        plot_bgcolor = 'rgba(0,0,0,0)',
        paper_bgcolor = 'rgba(0,0,0,0)',
        margin=dict(l=2, r=2, t=5, b=5)
    )

    return fig2, fig3































if __name__ == '__main__':
    app.run_server(debug=True)  
